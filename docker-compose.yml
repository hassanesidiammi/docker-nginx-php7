version: '3'

services:
    db:
        container_name: db
        build:
            context: docker/${DB_IMAGE}
            args:
                DB_IMAGE_TAG: ${DB_IMAGE_TAG}
                DB_USER: ${DB_USER}
                DB_PASSWORD: ${DB_PASSWORD}
                DB_NAME: ${DB_NAME}
        ports:
            - ${DB_PORT}:${DB_PORT_CONTAINER}
        volumes:
            - ${DB_DATA}:${DB_DATA_CONTAINER}

    php:
        build:
            context: docker/php
            args:
              PHP_VERSION: ${PHP_VERSION}
              WORKDIR: ${PHP_VOLUME_CONTAINER}
        container_name: php
        volumes:
            - ${PHP_VOLUME}:${PHP_VOLUME_CONTAINER}
            - ../history/php.bash_history.txt:/root/.bash_history
        links:
            - db
        ports:
            - 9000:9000

    nginx:
        container_name: nginx
        build:
            context: docker/nginx
            args:
                WORKDIR: ${PHP_VOLUME_CONTAINER}
        ports:
            - 8080:8080
            - 80:80
        links:
            - php
        volumes:
            - ${PHP_VOLUME}:${PHP_VOLUME_CONTAINER}
            - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled
            - ${LOGS_DIR}/nginx/:/var/log/nginx

    adminer:
        container_name: adminer
        depends_on:
            - db
        image: adminer
        restart: always
        ports:
            - 8085:8080

    phpmyadmin:
        container_name: phpmyadmin
        depends_on:
            - db
        image: phpmyadmin/phpmyadmin
        restart: always
        ports:
            - '8086:80'
        environment:
            PMA_HOST: db
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
            PMA_ARBITRARY: 1

    sonarqube:
        container_name: sonarqube
        build:
            context: docker/sonarqube
            args:
                SONARQUBE_VERSION: ${SONARQUBE_VERSION}
        depends_on:
            - db
        ports:
            - "9000:9000"
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
            SONAR_JDBC_USERNAME: postgres
            SONAR_JDBC_PASSWORD: root
        volumes:
            - "../sonar/sonarqube_data:/opt/sonarqube/data"
            - "../sonar/sonarqube_extensions:/opt/sonarqube/extensions"
            - "../sonar/sonarqube_logs:/opt/sonarqube/logs"
            - "../sonar/sonarqube_temp:/opt/sonarqube/temp"

    sonarscanner:
        container_name: sonarscanner
        depends_on:
            - sonarqube
        image: sonarsource/sonar-scanner-cli

        volumes:
            - ${SONAR_PROJECT_DIR}:/usr/src
            - ${SONAR_PROJECT_PROPERTIES_FILE}:/usr/config/sonar-project.properties

        working_dir: /usr/src
        command:
            - 'sonar-scanner'
            - '-X'
            - '-Dproject.settings=../config/sonar-project.properties'
            - '-Dsonar.working.directory=../../tmp'


#    elk:
#        container_name: nginx
#        image: willdurand/elk
#        env_file: ./.env
#        ports:
#            - ${ELK_PORT}:80
#        volumes:
#            - ./docker/elk/logstash:/etc/logstash
#            - ./docker/elk/logstash/patterns:/opt/logstash/patterns
#        volumes_from:
#            - php
#            - nginx

#    redis:
#        image: redis:3.2.10

#    node:
#        build: docker/node
#        env_file: ./.env
#        volumes:
#            - ${SYMFONY_APP_PATH}:/var/www/${PROJETCT_FOLDER}
#        command: bash -c "yarn && yarn dev"
